// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: authentication_queries.sql

package data

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthUser = `-- name: CreateAuthUser :one
WITH new_auth_user AS (
    INSERT INTO auth_users (email, first_name, last_name)
    VALUES ($1, $2, $3)
    RETURNING id
),
new_provider AS (
    INSERT INTO auth_user_providers (user_id, provider, provider_user_id)
    SELECT id, $4, $5 FROM new_auth_user
),
new_user AS (
    INSERT INTO users (id, email, first_name, last_name)
    SELECT id, $1, $2, $3 FROM new_auth_user
)
SELECT id FROM new_auth_user
`

type CreateAuthUserParams struct {
	Email          string
	FirstName      string
	LastName       string
	Provider       string
	ProviderUserID string
}

func (q *Queries) CreateAuthUser(ctx context.Context, arg CreateAuthUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAuthUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Provider,
		arg.ProviderUserID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const findAuthUserByID = `-- name: FindAuthUserByID :one
SELECT id, email, first_name, last_name, mobile_number, created_at, updated_at 
FROM users
WHERE id = $1
`

type FindAuthUserByIDRow struct {
	ID           uuid.UUID
	Email        string
	FirstName    string
	LastName     string
	MobileNumber *string
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

func (q *Queries) FindAuthUserByID(ctx context.Context, id uuid.UUID) (FindAuthUserByIDRow, error) {
	row := q.db.QueryRow(ctx, findAuthUserByID, id)
	var i FindAuthUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.MobileNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserIDByProvider = `-- name: FindUserIDByProvider :one
SELECT user_id 
FROM auth_user_providers 
WHERE provider_user_id = $1
`

func (q *Queries) FindUserIDByProvider(ctx context.Context, providerUserID string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, findUserIDByProvider, providerUserID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
